<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- mode: xml; fill-column: 72; -*- -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  ]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<rfc category="std" ipr="trust200902"
     docName="draft-ietf-netmod-module-tags-05"
     updates="RFC8407">
  <front>
    <title abbrev="YANG Module Tags">YANG Module Tags</title>
    <author initials='C.' surname="Hopps" fullname='Christan Hopps'>
      <organization>LabN Consulting, L.L.C.</organization>
      <address>
        <email>chopps@chopps.org</email>
      </address>
    </author>
    <author initials='L.' surname="Berger" fullname='Lou Berger'>
      <organization>LabN Consulting, L.L.C.</organization>
      <address>
        <email>lberger@labn.net</email>
      </address>
    </author>
    <author initials='D.' surname="Bogdanovic" fullname='Dean Bogdanovic'>
      <organization>Volta Networks</organization>
      <address>
        <email>ivandean@gmail.com</email>
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        This document provides for the association of tags with YANG
        modules. The expectation is for such tags to be used to help
        classify and organize modules. A method for defining, reading
        and writing a modules tags is provided. Tags may be standardized
        and assigned during module definition; assigned by
        implementations; or dynamically defined and set by users. This
        document provides guidance to future model writers and, as such,
        this document updates <xref target="RFC8407"/>.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="sec-intro" title="Introduction">
      <t>
        The use of tags for classification and organization is fairly
        ubiquitous not only within IETF protocols, but in the internet
        itself (e.g., #hashtags). One benefit of using tags for
        organization over a rigid structure is that it is more flexible
        and can more easily adapt over time as technologies evolve. Tags
        can be usefully standardized, but they can also serve as a
        non-standardized mechanism available for users to define
        themselves. This document provides a mechanism to define tags
        and associate them with YANG modules in a flexible manner. In
        particular, tags may be standardized as well as assigned during
        module definition; assigned by implementations; or dynamically
        defined and set by users.
      </t>
      <t>
        This document defines a YANG module <xref target="RFC7950"/>
        which provides a list of module entries to allow for adding or
        removing of tags as well as viewing the set of tags associated
        with a module.
      </t>
      <t>
        This document defines an extension statement to be used to
        indicate tags that SHOULD be added by the module implementation
        automatically (i.e., outside of configuration).
      </t>
      <t>
        This document also defines an IANA registry for tag prefixes
        as well as a set of globally assigned tags.
      </t>
      <t>
        <xref target="sec-guide"/> provides guidelines for
        authors of YANG data models.  This document updates <xref
        target="RFC8407"/>.
      </t>
      <t>
        The YANG data model in this document conforms to the Network
        Management Datastore Architecture defined in <xref
        target="RFC8342"/>.
      </t>
      <section anchor="examples" title="Some possible use cases of YANG module tags">
        <t>
          During this documents progression there were requests for
          example uses of module tags. The following are a few example
          use cases for tags. This list is certainly not exhaustive.
        </t>
        <t>
          One example use of tags would be to help filter different
          discrete categories of YANG modules supported by a device.
          E.g., if modules are suitably tagged, then an XPath query can
          be used to list all of the vendor modules supported by a
          device.
        </t>
        <t>
          Tags can also be used to help coordination when multiple
          semi-independent clients are interacting with the same
          devices. E.g., one management client could mark that some
          modules should not be used because they have not been verified
          to behave correctly, so that other management clients avoid
          querying the data associated with those modules.
        </t>
        <t>
          Tag classification is useful for users searching module
          repositories (e.g. YANG catalog). A query restricted to the
          'ietf:routing' module tag could be used to return only the
          IETF YANG modules associated with routing. Without tags, a
          user would need to know the name of all the IETF routing
          protocol YANG modules.
        </t>
        <t>
          Future management protocol extensions could allow for
          filtering queries of configuration or operational state on a
          server based on tags. E.g., return all operational state
          related to system-management.
        </t>
      </section>
    </section>
    <section anchor="sec-conventions" title="Conventions Used in This Document">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.
      </t>
    </section>
    <section anchor="sec-prefixes" title="Tag Values">
      <t>
        All tags SHOULD begin with a prefix indicating who owns their
        definition. An IANA registry is used to support standardizing
        tag prefixes. Currently 3 prefixes are defined with all others
        reserved. No further structure is imposed by this document on
        the value following the standard prefix, and the value can
        contain any yang type 'string' characters except
        carriage-returns, newlines and tabs.
      </t>
      <section anchor="sec-std-tags" title="IETF Standard Tags">
        <t>
          An IETF standard tag is a tag that has the prefix "ietf:". All
          IETF standard tags are registered with IANA in a registry
          defined later in this document.
        </t>
      </section>
      <section anchor="sec-vendor-tags" title="Vendor Tags">
        <t>
          A vendor tag is a tag that has the prefix "vendor:". These
          tags are defined by the vendor that implements the module, and
          are not standardized; however, it is RECOMMENDED that the
          vendor include extra identification in the tag to avoid
          collisions such as using the enterpise or organization name
          follwing the "vendor:" prefix (e.g.,
          vendor:example.com:vendor-defined-classifier).
        </t>
      </section>
      <section anchor="sec-user-tags" title="User Tags">
        <t>
          A user tag is any tag that has the prefix "user:". These tags
          are defined by the user/administrator and will never be
          standardized.
        </t>
      </section>
      <section anchor="sec-resv-tags" title="Reserved Tags">
        <t>
          Any tag not starting with the prefix "ietf:", "vendor:" or
          "user:" is reserved for future standardization.
        </t>
      </section>
    </section>
  <section anchor="sec-mod-tag-mgmnt" title="Tag Management">
    <t>
      Tags can become associated with a module in a number of ways. Tags
      may be defined and associated at module design time, at
      implementation time, or via user administrative control. As the
      main consumer of tags are users, users may also remove any tag, no
      matter how the tag became associated with a module.
    </t>
    <section anchor="sec-module-tags" title="Module Definition Tagging">
      <t>
        A module definition MAY indicate a set of tags to be added by
        the module implementer. These design time tags are indicated
        using the module-tag extension statement.
      </t>
      <t>
        If the module definition is IETF standards track, the tags MUST
        also be IETF standard tags (Section 3.1). Thus, new modules can
        drive the addition of new standard tags to the IANA registry,
        and the IANA registry can serve as a check against duplication.
      </t>
    </section>
    <section anchor="sec-imp-tags" title="Implementation Tagging">
      <t>
        An implementation MAY include additional tags associated with a
        module.  These tags SHOULD be standard or vendor specific tags.
      </t>
    </section>
    <section anchor="sec-user-tagging" title="User Tagging">
      <t>
        Tags of any kind can be assigned and removed by the user using
        normal configuration mechanisms.
      </t>
    </section>
 </section>
    <section anchor="sec-module" title="Tags Module Structure">
      <section anchor="sec-module-tree" title="Tags Module Tree">
      <t>
        The tree associated with the "ietf-module-tags" module follows.
        The meaning of the symbols can be found in <xref
        target="RFC8340"/>.
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
module: ietf-module-tags
  +--rw module-tags
     +--rw module* [name]
        +--rw name          yang:yang-identifier
        +--rw tag*          tag
        +--rw masked-tag*   tag
]]></artwork>
        </figure>
      </t>
      
      </section>
      <section anchor="sec-module-yang" title="Tags Module">
      <t>
        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-module-tags@2019-02-15.yang"
module ietf-module-tags {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-module-tags";
  prefix tags;

  import ietf-yang-types {
    prefix yang;
  }

  organization
    "IETF NetMod Working Group (NetMod)";
  contact
    "NetMod Working Group - <netmod@ietf.org>";

  // RFC Ed.: replace XXXX with actual RFC number and
  // remove this note.

  description
    "This module describes a mechanism associating tags with YANG
     modules. Tags may be IANA assigned or privately defined.

     Copyright (c) 2018 IETF Trust and the persons identified as
     authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Simplified BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
     'MAY', and 'OPTIONAL' in this document are to be interpreted as
     described in BCP 14 [RFC2119] [RFC8174] when, and only when,
     they appear in all capitals, as shown here.


     This version of this YANG module is part of RFC XXXX
     (https://tools.ietf.org/html/rfcXXXX); see the RFC itself for
     full legal notices.";

  // RFC Ed.: update the date below with the date of RFC publication
  // and RFC number and remove this note.

  revision 2018-10-17 {
    description
      "Initial revision.";
    reference "RFC XXXX: YANG Module Tags";
  }

  typedef tag {
    type string {
      length "1..max";
      pattern '[a-zA-Z_][a-zA-Z0-9\-_]*:[\S ]+';
    }
    description
      "A tag value is composed of a standard prefix followed by any
       type 'string' value that does not include carriage return,
       newline or tab characters.";
  }

  extension module-tag {
    argument tag;
    description
      "The argument 'tag' is of type 'tag'. This extension statement
       is used by module authors to indicate the tags that SHOULD be
       added automatically by the system. As such the origin of the
       value for the pre-defined tags should be set to 'system'.";
  }

  container module-tags {
    description
      "Contains the list of modules and their associated tags";
    list module {
      key "name";
      description
        "A list of modules and their associated tags";
      leaf name {
        type yang:yang-identifier;
        mandatory true;
        description
          "The YANG module name.";
      }
      leaf-list tag {
        type tag;
        description
          "Tags associated with the module. See the IANA 'YANG Module
           Tag Prefix' registry for reserved prefixes and the IANA
           'YANG Module IETF Tag' registry for IETF standard tags.

           The 'operational' state [RFC8342] view of this list is
           constructed using the following steps:

           1) System tags (i.e., tags of 'system' origin) are added.
           2) User configured tags (i.e., tags of 'intended' origin)
           are added.
           3) Any tag that is equal to a masked-tag is removed.";
      }
      leaf-list masked-tag {
        type tag;
        description
          "The list of tags that should not be associated with this
           module. The user can remove (mask) tags from the
           operational state datastore [RFC8342] by adding them to
           this list. It is not an error to add tags to this list
           that are not associated with the module, but they have no
           operational effect.";
      }
    }
  }
}
<CODE ENDS>
]]></artwork>
        </figure>
      </t>
    </section>
    </section>
    <section anchor="sec-other" title="Other Classifications">
      <t>
        It is worth noting that a different YANG module classification
        document exists <xref target="RFC8199"/>. That document only
        classifies modules in a logical manner and does not define
        tagging or any other mechanisms. It divides YANG modules into
        two categories (service or element) and then into one of three
        origins: standard, vendor or user. It does provide a good way to
        discuss and identify modules in general. This document defines
        standard tags to support <xref target="RFC8199"/> style
        classification.
      </t>
    </section>
    <section anchor="sec-guide" title="Guidelines to Model Writers">
      <t>
        This section updates <xref target="RFC8407"/>.
      </t>
      <section anchor="sec-guide-def" title="Define Standard Tags">
        <t>
          A module MAY indicate, using module-tag extension statements,
          a set of tags that are to be automatically associated with it
          (i.e., not added through configuration).
          <figure>
            <artwork><![CDATA[
        module example-module {
          ...
          import module-tags { prefix tags; }

          tags:module-tag "ietf:some-new-tag";
          tags:module-tag "ietf:some-other-tag";
          ...
        }
]]>
            </artwork>
          </figure>
        </t>
        <t>
          The module writer can use existing standard tags, or use new
          tags defined in the model definition, as appropriate. For
          standardized modules new tags MUST be assigned in the IANA
          registry defined below, see <xref target="sec-ietf-prefix"/>
          below.
        </t>
      </section>
    </section>
    <section anchor="sec-iana" title="IANA Considerations">
      <section anchor="sec-iana-prefix" title="YANG Module Tag Prefix Registry">
        <t>
          This registry allocates tag prefixes. All YANG module tags SHOULD
          begin with one of the prefixes in this registry.
        </t>
        <t>
          The allocation policy for this registry is Specification Required
          <xref target="RFC5226"/>.
        </t>
        <t>
          The initial values for this registry are as follows.
          <figure>
            <artwork>
 prefix    description
 --------  ---------------------------------------------------
 ietf:     IETF Standard Tag allocated in the IANA YANG Module
           IETF Tag Registry.
 vendor:   Non-standardized tags allocated by the module implementer.
 user:    Non-standardized tags allocated by and for the user.
            </artwork>
          </figure>
        </t>
        <t>
          Other standards organizations (SDOs) wishing to standardize
          their own set of tags should allocate a prefix from this
          registry.
        </t>
      </section>
      <section anchor="sec-ietf-prefix" title="YANG Module IETF Tag Registry">
        <t>
          This registry allocates prefixes that have the standard prefix
          "ietf:". New values should be well considered and not achievable
          through a combination of already existing standard tags.
        </t>
        <t>
          The allocation policy for this registry is IETF Review
          <xref target="RFC5226"/>.
        </t>
        <t>
          The initial values for this registry are as follows.
        </t>
        <texttable anchor="table_ietf_iana" title="IETF Module Tag Registry">
          <ttcol align='center'>Tag</ttcol>
          <ttcol align='center'>Description</ttcol>
          <ttcol align='center'>Reference</ttcol>

         <c>ietf:network-element-class</c>
         <c>A module for a network element.</c>
         <c><xref target="RFC8199"/></c>

         <c>ietf:network-service-class</c>
         <c>A module for a network service.</c>
         <c><xref target="RFC8199"/></c>

         <c>ietf:sdo-defined-class</c>
         <c>A module defined by a standards organization.</c>
         <c><xref target="RFC8199"/></c>

         <c>ietf:vendor-defined-class</c>
         <c>A module defined by a vendor.</c>
         <c><xref target="RFC8199"/></c>

         <c>ietf:user-defined-class</c>
         <c>A module defined by the user.</c>
         <c><xref target="RFC8199"/></c>

         <c>ietf:hardware</c>
         <c>A module relating to hardware (e.g., inventory).</c>
         <c>[This document]</c>

         <c>ietf:software</c>
         <c>A module relating to software (e.g., installed OS).</c>
         <c>[This document]</c>

         <c>ietf:qos</c>
         <c>A module for managing quality of service.</c>
         <c>[This document]</c>

         <c>ietf:protocol</c>
         <c>A module representing a protocol.</c>
         <c>[This document]</c>

         <c>ietf:system-management</c>
         <c>A module relating to system management (e.g., a system
         management protocol such as syslog, TACAC+, SNMP, netconf, ...).</c>
         <c>[This document]</c>

         <c>ietf:network-service</c>
         <c>A module relating to network service (e.g., a network
         service protocol such as an NTP server, DNS server, DHCP server, etc).</c>
         <c>[This document]</c>

         <c>ietf:oam</c>
         <c>A module representing Operations, Administration, and
         Maintenance (e.g., BFD).</c>
         <c>[This document]</c>

         <c>ietf:routing</c>
         <c>A module related to routing.</c>
         <c>[This document]</c>

         <c>ietf:signaling</c>
         <c>A module representing control plane signaling.</c>
         <c>[This document]</c>

         <c>ietf:lmp</c>
         <c>A module representing a link management protocol.</c>
         <c>[This document]</c>
        </texttable>
      </section>
    </section>
  </middle>
  <?rfc needLines="20"?>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.5226"?>
      <?rfc include="reference.RFC.7950"?>
      <?rfc include="reference.RFC.8174"?>
      <?rfc include="reference.RFC.8407"?>
    </references>
    <references title="Informative References">
      <?rfc include="reference.RFC.8199"?>
      <?rfc include="reference.RFC.8340"?>
      <?rfc include="reference.RFC.8342"?>
    </references>
    <section title="Acknowledgements">
      <t>
      Special thanks to Robert Wilton for his help improving the
      introduction and providing the example use cases.
      </t>
    </section>
    <section anchor="code-example" title="Example">
      <t>
        The following is a fictional example result from a query of
        the module tags list. For the sake of brevity only a few module
        results are imagined.
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
  {
    "ietf-module-tags:module-tags": {
      "module": [
        {
          "name": "ietf-bfd",
          "tag": [
            "ietf:network-element-class",
            "ietf:oam",
            "ietf:protocol",
            "ietf:sdo-defined-class"
          ]
        },
        {
          "name": "ietf-isis",
          "tag": [
            "ietf:network-element-class",
            "ietf:protocol",
            "ietf:routing"
            "ietf:sdo-defined-class",
          ]
        },
        {
          "name": "ietf-ssh-server",
          "tag": [
            "ietf:network-element-class",
            "ietf:protocol",
            "ietf:sdo-defined-class",
            "ietf:system-management"
          ]
        }
      ]
    }
  }
          ]]></artwork>
        </figure>
      </t>
    </section>
  </back>
</rfc>

<!-- Local Variables: -->
<!-- fill-column:72 -->
<!-- End: -->
